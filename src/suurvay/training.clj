(ns suurvay.training
  "This namespace contains functions for grouping like users in a
  generic way. There's some semantic overlap between this namespace
  and suurvay.twitter, but this namespace is mainly about
  inference.

  These functions are geared towards generating training data, not
  evaluating an unfamiliar user. See the identification namespace for
  the latter."
  (:require [suurvay.twitter :as t]
            [suurvay.twitter-pure :refer [invert-frequencies]]
            [clojure.set :refer [difference]]
            [clojure.string :as s]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Pure functions and data
(def sentiment-regex
  (let [tok "[#a-zA-Z]+"
        prefixes ["anti[- ]" "pro[- ]" "against " "support "]]
    (->> prefixes
      (map #(str "(" % tok ")"))
      (s/join "|")
      (str "(?i)")
      re-pattern)))

(defn sentiments
  "Returns a set of lower-cased sentiments from the given string."
  [s]
  (->> (or s "")
    (re-seq sentiment-regex)
    (map (comp s/lower-case first))
    set))

(defn popularity-filter
  "Returns a predicate that matches against map entries when the key
  is greater than or equal to n."
  [n]
  (fn [[k _]] (>= k n)))

(defn confidence->count
  [confidence group]
  {:pre [(<= 0 confidence 1)]}
  (* confidence
     (count group)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Higher-order Twitter functions (pure, but return side-effecting fns)

(defn top-n-fn
  "Takes a function f that: returns some value for a Twitter name/ID.
  If the return value from f will be a collection, pass :concat as a
  final argument.

  Returns a function that: takes a collection of ids-or-names and
  returns a map of {frequency return-value(s)}. The function takes an
  optional first argument `ratio`, which excludes elements from the
  map that are not present in at least that proportion of the users
  scanned."
  [f & opts]
  (let [mapper (if (some #{:concat} opts)
                    (partial mapcat f)
                    (partial map f))]
    (fn top-n
      ([ids-or-names] (top-n 0.75 ids-or-names))
      ([ratio ids-or-names]
       (let [n (confidence->count ratio ids-or-names)
             results (mapper ids-or-names)
             freqs (-> results frequencies invert-frequencies)]
         (->> freqs
           (filter (popularity-filter n))
           (into {})))))))

(defn popular-fn-for-users
 "Similar to top-n-fn, but returns a hash-set.
 `f` should be a function generated by top-n-fn."
 [f]
 (fn pop-n ([ids-or-names] (pop-n 0.75 ids-or-names))
   ([ratio ids-or-names]
    (-> (f ratio ids-or-names)
      vals
      flatten
      set))))

(defn differentiating-fn
  "Given a function f of id-or-name -> collection, return a new
  function that: takes two groups and returns items (from the return
  value of f) that appear to be specific to the first group. If the
  optional third argument `confidence` is supplied, only elements that
  appear in the output for that proportion of users will appear in the
  output. The default confidence is 0.75."
  [f]
  (fn diff-fn ([group-1 group-2] (diff-fn group-1 group-2 0.75))
    ([group-1 group-2 confidence]
     (let [group-1-vals (f confidence group-1)
           group-2-vals (f confidence group-2)]
       (difference group-1-vals group-2-vals)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions that depend on the Twitter API

;; Hashtag functions
(def ^{:arglists '([ratio ids-or-names] [ids-or-names])}
  top-n-hashtags-for-users
  "Returns a map of hashtags used by at least `ratio` of the given users.
  The map has the form {frequency hashtags-list}.
  If not supplied, `ratio` will be 0.75."
  (top-n-fn t/get-user-hashtags :concat))

(def ^{:arglists '([ratio ids-or-names] [ids-or-names])}
  popular-hashtags-for-users
  "Similar to top-n-hashtags-for-users, but returns a hash set."
  (popular-fn-for-users top-n-hashtags-for-users))

(def ^{:arglists '([group-1 group-2 confidence] [group-1 group-2])}
  differentiating-hashtags
  "Given two groups, return a set of hashtags that appear to be
  specific to group-1. If confidence is supplied, it must be a number
  between 0 and 1, and only hashtags used by at least that proportion
  of users will be examined."
  (differentiating-fn popular-hashtags-for-users))

;; Following functions
(def ^{:arglists '([ids-or-names ratio] [ids-or-names])}
  top-n-following-for-users
  "Returns a map of users followed by at least the `ratio` of the given users.
  The map has the form {frequency twitter-ids}.
  If not supplied, `ratio` will be 0.75."
  (top-n-fn t/get-following :concat))

(def ^{:arglists '([ratio ids-or-names] [ids-or-names])}
  popular-following-for-users
  "Similar to top-n-following-for-users, but returns a hash set."
  (popular-fn-for-users top-n-following-for-users))

(def
  ^{:arglists '([group-1 group-2 confidence])}
  differentiating-follows
  "Given two groups, return a set of users that appear to be specific
  to group-1. If confidence is supplied, it must be a number between 0
  and 1, and only users followed by at least that proportion of users
  will be examined."
  (differentiating-fn popular-following-for-users))

;; Profile functions
(defn profile-sentiments
  "Returns a set of 'pro-x' and 'anti-x' tokens from the given user's
  profile. Case-insensitive, hashtag-aware."
  [id-or-name]
  (->> id-or-name
    t/get-profile
    sentiments))

(def
  ^{:arglists '([ratio ids-or-names] [ids-or-names])}
  top-n-profile-sentiments-for-users
  "Returns a map of sentiments included in at least `ratio` of the given users.
  The map has the form {frequency sentiments-list}.
  If not supplied, `ratio` will be 0.75."
  (top-n-fn profile-sentiments :concat))

(def
  ^{:arglists '([ratio ids-or-names] [ids-or-names])}
  popular-profile-sentiments-for-users
  "Similar to top-n-profile-sentiments-for-users, but returns a hash set."
  (popular-fn-for-users top-n-profile-sentiments-for-users))

(def
  ^{:arglists '([group-1 group-2 confidence] [group-1 group-2])}
  differentiating-profile-sentiments
  "Given two groups, return a set of users that appear to be specific
  to group-1. If confidence is supplied, it must be a number between 0
  and 1, and only users followed by at least that proportion of users
  will be examined."
  (differentiating-fn popular-profile-sentiments-for-users))

